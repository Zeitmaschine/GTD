[gd_scene load_steps=8 format=2]

[ext_resource path="res://Assets/MatheBombenTurm/MatheBombenTurm.png" type="Texture" id=1]
[ext_resource path="res://Assets/Mathematiker/Range.png" type="Texture" id=2]
[ext_resource path="res://Scenes/UpgradeInterfaceBombenturm.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D 

#Grundwerte
var projectilespeed = 600
var firerate = 3.0
var can_fire = true
var projectile = preload (\"res://Scenes/Bomb.tscn\")
var enemyinrange = 0
var target = null
var placed = false
export var priority = 0
var rangeVisible = false

#Skins
var skin_0 = preload(\"res://Assets/MatheBombenTurm/MatheBombenTurm.png\")
var skin_1 = preload(\"res://Assets/MatheBombenTurm/MatheBombenTurm_1.png\")
var skin_2 = preload(\"res://Assets/MatheBombenTurm/MatheBombenTurm_2.png\")
var skin_12 = preload(\"res://Assets/MatheBombenTurm/MatheBombenTurm_12.png\")

#Verbesserungswerte
export var upgrade1 = false
export var upgrade2 = false
export var attackpowerlvl = 1
export var fireratelvl = 1
export var attackrangelvl = 1

#Reichweite wird zu Beginn festgelegt
func _ready():
	set_range()

#Findung des Ziels und das Ausführen der Aktionen
func _process(delta):
	
	if upgrade1 == true:
		$Sprite_MatheBombenTurm.texture = skin_1
	if upgrade2 == true:
		$Sprite_MatheBombenTurm.texture = skin_2
	if upgrade1 == true && upgrade2 == true:
		$Sprite_MatheBombenTurm.texture = skin_12
		
	if placed == true:
		if can_fire == true && enemyinrange > 0:
			aim_and_shoot()
		
		if get_node(\"UpgradeWindow/BombenturmUpgrade\").visible == true:
			$Range_Sprite.visible = true
			rangeVisible = true
		
		if get_node(\"UpgradeWindow/BombenturmUpgrade\").visible == false && rangeVisible == true:
			$Range_Sprite.visible = false
			rangeVisible = false

#Zielfindung
func find_closest_target():
	var maxHealth = 1
	var minHealth = 11
	var units = $Range.get_overlapping_bodies()
	if units.size() > 0:
		var closest = units[0].get_parent()
		
		#Suche nach dem meisten Leben
		for unit in units:
			if unit.hp > maxHealth:
				maxHealth = unit.hp
				
		#Suche nach dem wenigsten Leben
		for unit in units:
			if unit.hp < minHealth:
				minHealth = unit.hp
		
		
		#Suche einfach nach dem nächsten Gegner
		if priority == 0:
			for unit in units:
				if position.distance_to(unit.global_position) < position.distance_to(closest.global_position) + 100:
					closest = unit.get_parent()
			target = closest

		#Suche nach dem nächsten Gegner mit dem meisten Leben
		if priority == 1:
			for unit in units:
				if position.distance_to(unit.global_position) < position.distance_to(closest.global_position) + 100 && unit.hp == maxHealth:
					closest = unit.get_parent()
			target = closest

		
		#Suche nach dem nächsten Gegner mit dem wenigsten Leben
		if priority == 2:
			for unit in units:
				if position.distance_to(unit.global_position) < position.distance_to(closest.global_position) + 100 && unit.hp == minHealth:
					closest = unit.get_parent()
			target = closest

#Vorbeugung vor Abstürzen
func hit(damage):
	pass

#Schießt eine Bombe
func aim_and_shoot():
	find_closest_target()
	rotation = (target.global_position - position).angle() - PI/2
	var projectile_instance = projectile.instance()
	projectile_instance.position = $Firepoint.get_global_position()
	projectile_instance.rotation_degrees = rotation_degrees
	projectile_instance.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation))
	projectile_instance.setDamage(attackpowerlvl * 2)
	projectile_instance.upgrade1 = upgrade1
	projectile_instance.upgrade2 = upgrade2
	get_tree().get_root().add_child(projectile_instance)
	can_fire = false
	yield(get_tree().create_timer(firerate - (fireratelvl * 0.35)), \"timeout\")
	can_fire = true
	
#Reichweite wird festgelegt
func set_range():
	$Range/CollisionRange.scale = Vector2(0.7 + (0.3 * attackrangelvl) , 0.7 + (0.3 * attackrangelvl ))
	$Range_Sprite.scale = Vector2(0.7 + (0.3 * attackrangelvl), 0.7 + (0.3 * attackrangelvl ))

#Reichweite wird angezeigt
func _on_MatheBombenTurm_Area_mouse_entered():
	$Sprite_MatheBombenTurm.scale = Vector2(1.2,1.2)
	$Range_Sprite.visible = true

func _on_MatheBombenTurm_Area_mouse_exited():
	$Sprite_MatheBombenTurm.scale = Vector2(1,1)
	$Range_Sprite.visible = false


#Bestimmung, ob überhaupt Gegner anwesend sind
func _on_Range_body_entered(body):
	enemyinrange += 1

func _on_Range_body_exited(body):
	enemyinrange -= 1

#Aufrufung des Upgrade-Menüs
func _on_MatheBombenTurm_Area_input_event(viewport, event, shape_idx):
	if(event.is_action_pressed(\"left_click\") and placed == true):
		 $UpgradeWindow/BombenturmUpgrade.visible =  true
"

[sub_resource type="CircleShape2D" id=2]
radius = 50.4414

[sub_resource type="CircleShape2D" id=3]
radius = 53.1815

[sub_resource type="CircleShape2D" id=4]
radius = 197.703

[node name="MatheBombenTurm" type="KinematicBody2D"]
collision_layer = 2
script = SubResource( 1 )

[node name="Range_Sprite" type="Sprite" parent="."]
visible = false
scale = Vector2( 1.16621, 1.14221 )
texture = ExtResource( 2 )

[node name="Sprite_MatheBombenTurm" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="Collision_MatheBombenTurm" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="Firepoint" type="Node2D" parent="."]
position = Vector2( 0.784258, 103.015 )

[node name="MatheBombenTurm_Area" type="Area2D" parent="."]
collision_layer = 2
collision_mask = 10

[node name="Collision_MatheBombenTurm" type="CollisionShape2D" parent="MatheBombenTurm_Area"]
shape = SubResource( 3 )

[node name="Range" type="Area2D" parent="."]
collision_layer = 0

[node name="CollisionRange" type="CollisionShape2D" parent="Range"]
visible = false
shape = SubResource( 4 )

[node name="UpgradeWindow" type="CanvasLayer" parent="."]

[node name="BombenturmUpgrade" parent="UpgradeWindow" instance=ExtResource( 3 )]
pause_mode = 0
visible = false
[connection signal="input_event" from="MatheBombenTurm_Area" to="." method="_on_MatheBombenTurm_Area_input_event"]
[connection signal="mouse_entered" from="MatheBombenTurm_Area" to="." method="_on_MatheBombenTurm_Area_mouse_entered"]
[connection signal="mouse_exited" from="MatheBombenTurm_Area" to="." method="_on_MatheBombenTurm_Area_mouse_exited"]
[connection signal="body_entered" from="Range" to="." method="_on_Range_body_entered"]
[connection signal="body_exited" from="Range" to="." method="_on_Range_body_exited"]
