[gd_scene load_steps=11 format=2]

[ext_resource path="res://Assets/Informatiker/Informatiker.png" type="Texture" id=1]
[ext_resource path="res://Assets/Mathematiker/Range.png" type="Texture" id=2]
[ext_resource path="res://Scenes/Hack_particle.tscn" type="PackedScene" id=3]
[ext_resource path="res://Audio/Hack.wav" type="AudioStream" id=4]
[ext_resource path="res://Audio/Money_gain_extra.wav" type="AudioStream" id=5]
[ext_resource path="res://Scenes/Money_hack.tscn" type="PackedScene" id=6]
[ext_resource path="res://Scenes/UpgradeInterfaceInformatiker.tscn" type="PackedScene" id=7]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D 

#Grundwerte
var projectilespeed = 1000
var firerate = 5.0
var can_fire = true
var can_fire2 = true
var projectile = preload (\"res://Scenes/Projectile.tscn\")
var hack_particle = preload (\"res://Scenes/Hack_particle.tscn\")
var enemyinrange = 0
var target = null
var can_make_money = true
var target_enemy = null
var placed = false
export var priority = 1

#Verbesserungswerte

export var upgrade1 = false
export var upgrade2 = false
export var attackpowerlvl = 1
export var fireratelvl = 1
export var attackspeedlvl = 1

func _ready():
	pass

#Findung des Ziels und das Ausführen der Aktionen

func _process(delta):
	if placed == true:
		find_closest_target()
		if can_fire2 == true && enemyinrange > 0 && target != Vector2(0,0) && upgrade2 == true:
			aim_and_shoot_upgrade2()
	
		if can_fire == true && enemyinrange > 0 && target != Vector2(0,0):
			aim_and_shoot()
	
		if upgrade1 == true:
			earn_money_upgrade_1()

#Bestimmung, ob überhaupt Gegner anwesend sind

func _on_Range_body_entered(body):
		enemyinrange += 1

func _on_Range_body_exited(body):
		enemyinrange -= 1


#Zielfindung
func find_closest_target():
	var maxHealth = 1
	var minHealth = 11
	var units = $Range.get_overlapping_bodies()
	if units.size() > 0:
		var closest = units[0].get_parent()
		
		#Suche nach dem meisten Leben
		for unit in units:
			if unit.hp > maxHealth:
				maxHealth = unit.hp
				
		#Suche nach dem wenigsten Leben
		for unit in units:
			if unit.hp < minHealth:
				minHealth = unit.hp
		
		
		#Suche einfach nach dem nächsten Gegner
		if priority == 0:
			for unit in units:
				if position.distance_to(unit.global_position) < position.distance_to(closest.global_position):
					closest = unit.get_parent()
				target = closest.position
				target_enemy = closest

	
		
		#Suche nach dem nächsten Gegner mit dem meisten Leben
		if priority == 1:
			for unit in units:
				if position.distance_to(unit.global_position) < position.distance_to(closest.global_position) && unit.hp == maxHealth:
					closest = unit.get_parent()
				target = closest.position
				target_enemy = closest

		
		#Suche nach dem nächsten Gegner mit dem wenigsten Leben
		if priority == 2:
			for unit in units:
				if position.distance_to(unit.global_position) < position.distance_to(closest.global_position) && unit.hp == minHealth:
					closest = unit.get_parent()
				target = closest.position
				target_enemy = closest
			
	else:
			target = null

#Vorbeugung vor Abstürzen
func hit(damage):
	pass

#Rotation in Richtung Gegner und das Schießen
func aim_and_shoot():
	if target != null:
		rotation = (target - position).angle() - PI/2
		var projectile_instance = projectile.instance()
		projectile_instance.position = $Firepoint.get_global_position()
		projectile_instance.rotation_degrees = rotation_degrees
		projectile_instance.apply_impulse(Vector2(), Vector2(0, projectilespeed +(200 * attackspeedlvl)).rotated(rotation))
		projectile_instance.setDamage(attackpowerlvl + 4)
		get_tree().get_root().add_child(projectile_instance)
		can_fire = false
		yield(get_tree().create_timer(firerate - (fireratelvl * 0.9)), \"timeout\")
		can_fire = true
	
#Ausgeführter Damage-Hack auf den Gegner
func aim_and_shoot_upgrade2():
	var hack_particle_instance = hack_particle.instance()
	hack_particle_instance.position = target
	hack_particle_instance.emitting = true
	get_tree().get_root().add_child(hack_particle_instance)
	find_closest_target()
	target_enemy.hit(attackpowerlvl + 2)
	$Hack_sound.playing = true
	$Hack_particle.emitting = true
	can_fire2 = false
	yield(get_tree().create_timer(( 2 + firerate) - (fireratelvl * 1.0)), \"timeout\")
	can_fire2 = true

	
#Generierung von Geld
func earn_money_upgrade_1():
	yield(get_tree().create_timer(5.0), \"timeout\")
	if can_make_money == true && get_parent().waverunning == true:
		$Money_hack.emitting = true
		$Money_gain_sound.playing = true
		get_parent().add_extramoney(150)
		can_make_money = false
		yield(get_tree().create_timer(5.0), \"timeout\")
		can_make_money = true
		


#Anzeige der Reichweite
func _on_Informatiker_Area_mouse_entered():
	scale = Vector2(1.2,1.2)
	$Range_Sprite.visible = true

func _on_Informatiker_Area_mouse_exited():
	scale = Vector2(1,1)
	$Range_Sprite.visible = false


#Öffnen des Upgrade-Menüs
func _on_Informatiker_Area_input_event(viewport, event, shape_idx):
	if(event.is_action_pressed(\"left_click\") and placed == true):
		 $UpgradeWindow/InformatikerUpgrade.visible =  true
"

[sub_resource type="CircleShape2D" id=2]
radius = 43.5791

[sub_resource type="CircleShape2D" id=3]
radius = 2269.88

[node name="Informatiker" type="KinematicBody2D"]
collision_layer = 2
collision_mask = 2
script = SubResource( 1 )

[node name="Range_Sprite" type="Sprite" parent="."]
visible = false
scale = Vector2( 18.515, 16.054 )
texture = ExtResource( 2 )

[node name="CollisionInformatiker2" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="Sprite_Informatiker" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="Firepoint" type="Node2D" parent="."]
position = Vector2( 0, 67.998 )

[node name="Hack_particle" parent="." instance=ExtResource( 3 )]

[node name="Money_hack" parent="." instance=ExtResource( 6 )]

[node name="Hack_sound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 4 )
volume_db = -26.34

[node name="Money_gain_sound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
volume_db = -30.291

[node name="Informatiker_Area" type="Area2D" parent="."]
collision_layer = 2
collision_mask = 10

[node name="CollisionInformatiker" type="CollisionShape2D" parent="Informatiker_Area"]
shape = SubResource( 2 )

[node name="Range" type="Area2D" parent="."]
collision_layer = 0

[node name="CollisionRange" type="CollisionShape2D" parent="Range"]
shape = SubResource( 3 )

[node name="UpgradeWindow" type="CanvasLayer" parent="."]

[node name="InformatikerUpgrade" parent="UpgradeWindow" instance=ExtResource( 7 )]
visible = false
[connection signal="input_event" from="Informatiker_Area" to="." method="_on_Informatiker_Area_input_event"]
[connection signal="mouse_entered" from="Informatiker_Area" to="." method="_on_Informatiker_Area_mouse_entered"]
[connection signal="mouse_exited" from="Informatiker_Area" to="." method="_on_Informatiker_Area_mouse_exited"]
[connection signal="body_entered" from="Range" to="." method="_on_Range_body_entered"]
[connection signal="body_exited" from="Range" to="." method="_on_Range_body_exited"]
