[gd_scene load_steps=8 format=2]

[ext_resource path="res://Assets/Winkelninja/Winkelninja.png" type="Texture" id=1]
[ext_resource path="res://Assets/Mathematiker/Range.png" type="Texture" id=2]
[ext_resource path="res://Scenes/UpgradeInterfaceWinkelninja.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D 

#Grundwerte
var projectilespeed = 1000 
var firerate = 1
var can_fire = true
var projectile = preload (\"res://Scenes/Projectile.tscn\")
var enemyinrange = 0
var target = null
var placed = false

#Verbesserungswerte
export var upgrade1 = false
export var upgrade2 = false
export var attackpowerlvl = 1
export var fireratelvl = 1
export var attackrangelvl = 1

#Reichweite wird zu Beginn festgelegt
func _ready():
	set_range()

#Findung des Ziels und das Ausführen der Aktionen
func _process(delta):
	if placed == true:
		if can_fire == true && enemyinrange > 0 && upgrade1 == true && upgrade2 == true:
			shoot_upgrade_1_2()
		
		if can_fire == true && enemyinrange > 0 && upgrade1 == true:
			shoot_upgrade_1()
		
		if can_fire == true && enemyinrange > 0 && upgrade2 == true:
			shoot_upgrade_2()
		
		if can_fire == true && enemyinrange > 0:
			shoot()

#Bestimmung, ob überhaupt Gegner anwesend sind
func _on_Range_body_entered(body):
		enemyinrange += 1

func _on_Range_body_exited(body):
		enemyinrange -= 1

#Vorbeugung vor Abstürzen
func hit(damage):
	pass

#Schießt
func shoot():
	var i = 0
	while i < 8:
		rotation =  rotation + PI/4
		var projectile_instance = projectile.instance()
		projectile_instance.position = $Firepoint.get_global_position()
		projectile_instance.rotation_degrees = rotation_degrees
		projectile_instance.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation))
		projectile_instance.setDamage(attackpowerlvl)
		get_tree().get_root().add_child(projectile_instance)
		can_fire = false
		yield(get_tree().create_timer(0.08), \"timeout\")
		i += 1
	yield(get_tree().create_timer(firerate - (fireratelvl * 0.2)), \"timeout\")
	can_fire = true
	
#Schießt mit mehr Projektilen
func shoot_upgrade_1():
	var i = 0
	while i < 16:
		rotation =  rotation + PI/8
		var projectile_instance = projectile.instance()
		projectile_instance.position = $Firepoint.get_global_position()
		projectile_instance.rotation_degrees = rotation_degrees
		projectile_instance.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation))
		projectile_instance.setDamage(attackpowerlvl)
		get_tree().get_root().add_child(projectile_instance)
		can_fire = false
		yield(get_tree().create_timer(0.04), \"timeout\")
		i += 1
	yield(get_tree().create_timer(firerate - (fireratelvl * 0.2)), \"timeout\")
	can_fire = true

#Schießt mit schneller Drehung
func shoot_upgrade_2():
	var i = 0
	while i < 8:
		rotation =  rotation + PI/4
		var projectile_instance = projectile.instance()
		projectile_instance.position = $Firepoint.get_global_position()
		projectile_instance.rotation_degrees = rotation_degrees
		projectile_instance.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation))
		projectile_instance.setDamage(attackpowerlvl)
		get_tree().get_root().add_child(projectile_instance)
		can_fire = false
		yield(get_tree().create_timer(0.02), \"timeout\")
		i += 1
	yield(get_tree().create_timer(firerate - (fireratelvl * 0.2)), \"timeout\")
	can_fire = true
	
#Schießt mit schneller Drehung und mehr Projektilen
func shoot_upgrade_1_2():
	var i = 0
	while i < 16:
		rotation =  rotation + PI/8
		var projectile_instance = projectile.instance()
		projectile_instance.position = $Firepoint.get_global_position()
		projectile_instance.rotation_degrees = rotation_degrees
		projectile_instance.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation))
		projectile_instance.setDamage(attackpowerlvl)
		get_tree().get_root().add_child(projectile_instance)
		can_fire = false
		yield(get_tree().create_timer(0.01), \"timeout\")
		i += 1
	yield(get_tree().create_timer(firerate - (fireratelvl * 0.2)), \"timeout\")
	can_fire = true

#Festlegung der Reichweite
func set_range():
	$Range/CollisionRange.scale = Vector2(0.9 + (0.1 * attackrangelvl) , 0.9 + (0.1 * attackrangelvl ))
	$Range_Sprite.scale = Vector2(0.9 + (0.1 * attackrangelvl), 0.9 + (0.1 * attackrangelvl ))

#Reichweite einsehen
func _on_WinkelNinja_Area_mouse_entered():
	scale = Vector2(1.2,1.2)
	$Range_Sprite.visible = true


func _on_WinkelNinja_Area_mouse_exited():
	scale = Vector2(1.0,1.0)
	$Range_Sprite.visible = false

#Upgrade-Menü öffnen
func _on_WinkelNinja_Area_input_event(viewport, event, shape_idx):
	if(event.is_action_pressed(\"left_click\") and placed == true):
		 $UpgradeWindow/WinkelninjaUpgrade.visible =  true
"

[sub_resource type="CircleShape2D" id=2]
radius = 40.0125

[sub_resource type="CircleShape2D" id=3]
radius = 192.398

[sub_resource type="CircleShape2D" id=4]
radius = 38.8632

[node name="Winkelninja" type="KinematicBody2D"]
collision_layer = 2
collision_mask = 0
script = SubResource( 1 )

[node name="CollisionWinkelninja" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource( 2 )

[node name="Range_Sprite" type="Sprite" parent="."]
scale = Vector2( 0.638226, 0.626098 )
texture = ExtResource( 2 )

[node name="Firepoint" type="Node2D" parent="."]
position = Vector2( -8.7395, 74.7491 )

[node name="Sprite_Winkelninja" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="Range" type="Area2D" parent="."]
collision_layer = 0

[node name="CollisionRange" type="CollisionShape2D" parent="Range"]
shape = SubResource( 3 )

[node name="Winkelninja_Area" type="Area2D" parent="."]
position = Vector2( -0.513336, 0 )
collision_layer = 2
collision_mask = 10

[node name="CollisionShape2D" type="CollisionShape2D" parent="Winkelninja_Area"]
visible = false
shape = SubResource( 4 )

[node name="UpgradeWindow" type="CanvasLayer" parent="."]

[node name="WinkelninjaUpgrade" parent="UpgradeWindow" instance=ExtResource( 3 )]
visible = false
margin_left = -0.513336
margin_right = -0.513306
[connection signal="mouse_entered" from="." to="." method="_on_Winkelninja_mouse_entered"]
[connection signal="mouse_exited" from="." to="." method="_on_Winkelninja_mouse_exited"]
[connection signal="body_entered" from="Range" to="." method="_on_Range_body_entered"]
[connection signal="body_exited" from="Range" to="." method="_on_Range_body_exited"]
[connection signal="input_event" from="Winkelninja_Area" to="." method="_on_WinkelNinja_Area_input_event"]
[connection signal="mouse_entered" from="Winkelninja_Area" to="." method="_on_WinkelNinja_Area_mouse_entered"]
[connection signal="mouse_exited" from="Winkelninja_Area" to="." method="_on_WinkelNinja_Area_mouse_exited"]
