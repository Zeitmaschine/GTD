[gd_scene load_steps=7 format=2]

[ext_resource path="res://Assets/Mathematiker/Mathematiker.png" type="Texture" id=1]
[ext_resource path="res://Assets/Mathematiker/Range.png" type="Texture" id=2]
[ext_resource path="res://Scenes/UpgradeInterfaceMathematiker.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D 

var projectilespeed = 1000 
var firerate = 2.0
var can_fire = true
var projectile = preload (\"res://Scenes/Projectile.tscn\")
var enemyinrange = 0
var target = null


export var upgrade1 = false
export var upgrade2 = false
export var attackpowerlvl = 1
export var fireratelvl = 1
export var attackrangelvl = 1

func _ready():
	set_range()


func _process(delta):
	find_closest_target()
	
	if can_fire == true && enemyinrange > 0 && upgrade1 == true && upgrade2 == true && target.position != Vector2(0,0):
		aim_and_shoot_upgrade_1_2()
	
	if can_fire == true && enemyinrange > 0 && upgrade1 == true && target.position != Vector2(0,0):
		aim_and_shoot_upgrade_1()
		
	if can_fire == true && enemyinrange > 0 && upgrade2 == true && target.position != Vector2(0,0):
		aim_and_shoot_upgrade_2()
	
	if can_fire == true && enemyinrange > 0 && target.position != Vector2(0,0):
		aim_and_shoot()

func _on_Range_body_entered(body):
		enemyinrange += 1

func _on_Range_body_exited(body):
		enemyinrange -= 1

func find_closest_target():
	var units = $Range.get_overlapping_bodies()
	if units.size() > 0:
		var closest = units[0].get_parent()
		for unit in units:
			if position.distance_to(unit.global_position) < position.distance_to(closest.global_position):
				closest = unit.get_parent()
			target = closest
	else:
			target = null
			
func hit(damage):
	pass


func _on_Mathematiker_Area_mouse_entered():
	scale = Vector2(1.2,1.2)
	$Range_Sprite.visible = true


func _on_Mathematiker_Area_mouse_exited():
	scale = Vector2(1,1)
	$Range_Sprite.visible = false

func aim_and_shoot():
	rotation = (target.global_position - position).angle() - PI/2
	var projectile_instance = projectile.instance()
	projectile_instance.position = $Firepoint.get_global_position()
	projectile_instance.rotation_degrees = rotation_degrees
	projectile_instance.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation))
	projectile_instance.setDamage(attackpowerlvl)
	get_tree().get_root().add_child(projectile_instance)
	can_fire = false
	yield(get_tree().create_timer(firerate - (fireratelvl * 0.15)), \"timeout\")
	can_fire = true
	
func aim_and_shoot_upgrade_1():
	var i = 0
	rotation = (target.global_position - position).angle() - PI/2
	while(i < 3):
		var projectile_instance = projectile.instance()
		projectile_instance.position = $Firepoint.get_global_position()
		projectile_instance.rotation_degrees = rotation_degrees
		projectile_instance.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation))
		projectile_instance.setDamage(attackpowerlvl)
		get_tree().get_root().add_child(projectile_instance)
		can_fire = false
		yield(get_tree().create_timer(0.1), \"timeout\")
		i += 1
		find_closest_target()
		can_fire = true
		
	can_fire = false
	yield(get_tree().create_timer(firerate - (fireratelvl * 0.15)), \"timeout\")
	can_fire = true
		
func aim_and_shoot_upgrade_2():
	rotation = (target.global_position - position).angle() - PI/2
	var projectile_instance1 = projectile.instance()
	var projectile_instance2 = projectile.instance()
	var projectile_instance3 = projectile.instance()
	
	projectile_instance1.position = $Firepoint.get_global_position()
	projectile_instance1.rotation_degrees = rotation_degrees
	projectile_instance1.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation))
	projectile_instance1.setDamage(attackpowerlvl)
	get_tree().get_root().add_child(projectile_instance1)
	
	projectile_instance2.position = $Firepoint.get_global_position()
	projectile_instance2.rotation_degrees = rotation_degrees
	projectile_instance2.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation + PI/8))
	projectile_instance2.setDamage(attackpowerlvl)
	get_tree().get_root().add_child(projectile_instance2)
	
	projectile_instance3.position = $Firepoint.get_global_position()
	projectile_instance3.rotation_degrees = rotation_degrees
	projectile_instance3.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation - PI/8))
	projectile_instance3.setDamage(attackpowerlvl)
	get_tree().get_root().add_child(projectile_instance3)
	
func aim_and_shoot_upgrade_1_2():
	var i = 0
	rotation = (target.global_position - position).angle() - PI/2
	while(i < 3):
		var projectile_instance1 = projectile.instance()
		var projectile_instance2 = projectile.instance()
		var projectile_instance3 = projectile.instance()
		
		projectile_instance1.position = $Firepoint.get_global_position()
		projectile_instance1.rotation_degrees = rotation_degrees
		projectile_instance1.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation))
		projectile_instance1.setDamage(attackpowerlvl)
		get_tree().get_root().add_child(projectile_instance1)
		
		projectile_instance2.position = $Firepoint.get_global_position()
		projectile_instance2.rotation_degrees = rotation_degrees
		projectile_instance2.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation + PI/8))
		projectile_instance2.setDamage(attackpowerlvl)
		get_tree().get_root().add_child(projectile_instance2)
	
		projectile_instance3.position = $Firepoint.get_global_position()
		projectile_instance3.rotation_degrees = rotation_degrees
		projectile_instance3.apply_impulse(Vector2(), Vector2(0, projectilespeed).rotated(rotation - PI/8))
		projectile_instance3.setDamage(attackpowerlvl)
		get_tree().get_root().add_child(projectile_instance3)
		
		
		
		
		
		can_fire = false
		yield(get_tree().create_timer(0.1), \"timeout\")
		i += 1
		find_closest_target()
		can_fire = true
	
	can_fire = false
	yield(get_tree().create_timer(firerate - (fireratelvl * 0.15)), \"timeout\")
	can_fire = true
	
	
func set_range():
	$Range/CollisionRange.scale = Vector2(0.9 + (0.1 * attackrangelvl) , 0.9 + (0.1 * attackrangelvl ))
	$Range_Sprite.scale = Vector2(0.9 + (0.1 * attackrangelvl), 0.9 + (0.1 * attackrangelvl ))
	
func _on_Mathematiker_Area_input_event(viewport, event, shape_idx):
	if(event.is_action_pressed(\"left_click\")):
		 $UpgradeWindow/MathematikerUpgrade.visible =  true

"

[sub_resource type="CircleShape2D" id=2]
radius = 53.1815

[sub_resource type="CircleShape2D" id=3]
radius = 127.263

[node name="Mathematiker" type="KinematicBody2D"]
collision_layer = 2
collision_mask = 2
script = SubResource( 1 )

[node name="CollisionMathematiker2" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="Firepoint" type="Node2D" parent="."]
position = Vector2( -8.7395, 74.7491 )

[node name="Range_Sprite" type="Sprite" parent="."]
visible = false
texture = ExtResource( 2 )

[node name="Sprite_Mathematiker" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="Mathematiker_Area" type="Area2D" parent="."]
collision_layer = 4

[node name="CollisionMathematiker" type="CollisionShape2D" parent="Mathematiker_Area"]
shape = SubResource( 2 )

[node name="Range" type="Area2D" parent="."]
position = Vector2( -0.394424, 0.0813217 )
collision_layer = 0

[node name="CollisionRange" type="CollisionShape2D" parent="Range"]
visible = false
shape = SubResource( 3 )

[node name="UpgradeWindow" type="CanvasLayer" parent="."]

[node name="MathematikerUpgrade" parent="UpgradeWindow" instance=ExtResource( 3 )]
visible = false
[connection signal="input_event" from="Mathematiker_Area" to="." method="_on_Mathematiker_Area_input_event"]
[connection signal="mouse_entered" from="Mathematiker_Area" to="." method="_on_Mathematiker_Area_mouse_entered"]
[connection signal="mouse_exited" from="Mathematiker_Area" to="." method="_on_Mathematiker_Area_mouse_exited"]
[connection signal="body_entered" from="Range" to="." method="_on_Range_body_entered"]
[connection signal="body_exited" from="Range" to="." method="_on_Range_body_exited"]
